package org.excilys.computer_database.validation;

import static org.junit.Assert.assertEquals;

import java.io.IOException;
import java.sql.Date;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import org.excilys.computer_database.model.Company;
import org.excilys.computer_database.model.Computer;
import org.excilys.computer_database.persistence.JdbcConnection;
import org.excilys.computer_database.service.CompanyService;
import org.excilys.computer_database.service.ComputerService;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import com.mysql.cj.conf.ConnectionUrlParser.Pair;

public class DatabaseTest {

  /**
   * Prepares the database.
   * @throws SQLException if there is an SQLException
   * @throws ClassNotFoundException if there is a ClassNotFoundException
   * @throws IOException if there is an IOException
   */
  @BeforeClass
  public static void init() throws SQLException, ClassNotFoundException, IOException {
    JdbcConnection.testMode = true;
    Class.forName("org.hsqldb.jdbc.JDBCDriver");
    initDatabase();
  }

  /**
   * Reset the connection to default mode.
   */
  @AfterClass
  public static void end() {
    JdbcConnection.testMode = false;
  }

  /**
   * Database initialization for testing.
   * @throws SQLException if there is an SQLException
   */
  public static void initDatabase() throws SQLException {
    Statement statement = JdbcConnection.getConnection().createStatement();
    statement.execute("create table company ("
        + "id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,"
        + "name VARCHAR(255),"
        + "constraint pk_company primary key (id));"
        );

    statement.execute("create table computer ("
        + "id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,"
        + "name VARCHAR(255),"
        + "introduced DATE NULL,"
        + "discontinued DATE NULL,"
        + "company_id INT default NULL,"
        + "constraint pk_computer primary key (id));"
        );

    statement.executeUpdate("INSERT INTO computer (name,introduced,discontinued,company_id) values ('Computer 1','1983-12-01','1984-04-01',1);");
    statement.executeUpdate("INSERT INTO computer (name,introduced,discontinued,company_id) values ('Computer 2',null,'1984-04-01',1);");
    statement.executeUpdate("INSERT INTO computer (name,introduced,discontinued,company_id) values ('Computer 3','1983-12-01',null,1);");
    statement.executeUpdate("INSERT INTO computer (name,introduced,discontinued,company_id) values ('Computer 4',null,null,1);");
    statement.executeUpdate("INSERT INTO computer (name,introduced,discontinued,company_id) values ('Computer 5',null,null,null);");
    statement.executeUpdate("INSERT INTO company (name) values ('Apple Inc.');");
    JdbcConnection.getConnection().commit();
  }

  /**
   * Get total records in computer table.
   * @return total number of records. In case of exception 0 is returned
   */
  private int getNumberOfComputers() {
    ArrayList<Computer> computers = ComputerService.getInstance().getComputers();
    if (computers != null) {
    return computers.size();
    } else {
      return 0;
    }
  }

  /**
   * Get total records in company table.
   * @return total number of records. In case of exception 0 is returned
   */
  private int getNumberOfCompanies() {
    ArrayList<Company> companies = CompanyService.getInstance().getCompanies();
    if (companies != null) {
    return companies.size();
    } else {
      return 0;
    }
  }

  /**
   * Get total records in company table.
   * @return total number of records. In case of exception 0 is returned
   * @param id id of the computer you want details of.
   */
  private Computer getComputerDetails(int id) {
    Computer computer = ComputerService.getInstance().getComputerDetails(id);
    return computer;
  }

  /**
   * Get all computers and checks there is the right number.
   */
  @Test
  public void testListOfComputers() {
    assertEquals(5, getNumberOfComputers());
  }

  /**
   * Get all companies and checks there is the right number.
   */
  @Test
  public void testListOfCompanies() {
    assertEquals(1, getNumberOfCompanies());
  }

  /**
   * Get all companies and checks there is the right number.
   */
  @Test
  public void testGetDetailedComputer() {
    int wrongId = -1;
    int goodId = 1;
    assertEquals(null, getComputerDetails(wrongId));
    assertEquals(goodId, getComputerDetails(goodId).getId());
  }

  /**
   * Check computer creation with valid and invalid parameters.
   */
  @Test
  public void testCreateComputer() {
    Computer goodComputer = new Computer(-1, "New good computer", Date.valueOf("1999-10-10"), Date.valueOf("2000-10-10"), 0, "Apple Inc.");
    Pair<ComputerValidationStatus, String> goodResult = ComputerService.getInstance().createComputer(goodComputer);

    Computer wrongCompanyIdComputer = new Computer(-1, "New wrong company id computer", Date.valueOf("1999-10-10"), Date.valueOf("2000-10-10"), 2, "Apple Inc.");
    Pair<ComputerValidationStatus, String> wrongCompanyIdResult = ComputerService.getInstance().createComputer(wrongCompanyIdComputer);

    Computer wrongDateComputer = new Computer(-1, "New wrong date computer", Date.valueOf("1998-10-10"), Date.valueOf("1998-10-10"), 0, "Apple Inc.");
    Pair<ComputerValidationStatus, String> wrongDateResult = ComputerService.getInstance().createComputer(wrongDateComputer);

    assertEquals(ComputerValidationStatus.OK, goodResult.left);
    assertEquals(ComputerValidationStatus.COMPANY_ID_ERROR, wrongCompanyIdResult.left);
    assertEquals(ComputerValidationStatus.DATE_ERROR, wrongDateResult.left);
  }

  /**
   * Check computer update with valid and invalid parameters.
   */
  @Test
  public void testUpdateComputer() {
    Computer goodComputer = new Computer(1, "Updated good computer", Date.valueOf("1999-10-10"), Date.valueOf("2000-10-10"), 0, "Apple Inc.");
    Pair<ComputerValidationStatus, String> goodResult = ComputerService.getInstance().updateComputer(goodComputer);

    Computer onlyNameComputer = new Computer(1, "Updated only name computer", null, null, -1, null);
    Pair<ComputerValidationStatus, String> onlyNameResult = ComputerService.getInstance().updateComputer(onlyNameComputer);

    Computer onlyNameAndDateComputer = new Computer(1, "Updated only name and date computer", Date.valueOf("1999-10-10"), Date.valueOf("2000-10-10"), -1, null);
    Pair<ComputerValidationStatus, String> onlyNameAndDateResult = ComputerService.getInstance().updateComputer(onlyNameAndDateComputer);

    Computer onlyNameCompanyIdComputer = new Computer(1, "Updated only name and company idcomputer", null, null, 0, null);
    Pair<ComputerValidationStatus, String> onlyNameCompanyIdResult = ComputerService.getInstance().updateComputer(onlyNameCompanyIdComputer);

    Computer wrongCompanyIdComputer = new Computer(1, "Updated wrong company id computer", Date.valueOf("1999-10-10"), Date.valueOf("2000-10-10"), 1, "Apple Inc.");
    Pair<ComputerValidationStatus, String> wrongCompanyIdResult = ComputerService.getInstance().updateComputer(wrongCompanyIdComputer);

    Computer wrongDateComputer = new Computer(1, "Updated wrong date computer", Date.valueOf("1998-10-10"), Date.valueOf("1998-10-10"), 0, "Apple Inc.");
    Pair<ComputerValidationStatus, String> wrongDateResult = ComputerService.getInstance().updateComputer(wrongDateComputer);

    assertEquals(ComputerValidationStatus.OK, goodResult.left);
    assertEquals(ComputerValidationStatus.OK, onlyNameResult.left);
    assertEquals(ComputerValidationStatus.OK, onlyNameAndDateResult.left);
    assertEquals(ComputerValidationStatus.OK, onlyNameCompanyIdResult.left);
    assertEquals(ComputerValidationStatus.COMPANY_ID_ERROR, wrongCompanyIdResult.left);
    assertEquals(ComputerValidationStatus.DATE_ERROR, wrongDateResult.left);
  }

}
