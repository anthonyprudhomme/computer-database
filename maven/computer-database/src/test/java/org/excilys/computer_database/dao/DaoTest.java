package org.excilys.computer_database.dao;

import static org.junit.Assert.assertEquals;

import java.io.IOException;
import java.sql.Date;
import java.sql.SQLException;
import java.sql.Statement;

import org.excilys.computer_database.exceptions.CDBObjectCompanyIdException;
import org.excilys.computer_database.exceptions.CDBObjectException;
import org.excilys.computer_database.model.Computer;
import org.excilys.computer_database.persistence.JdbcConnection;
import org.excilys.computer_database.service.CompanyService;
import org.excilys.computer_database.service.ComputerService;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class DaoTest {

  /**
   * Prepares the database.
   * @throws SQLException if there is an SQLException
   * @throws ClassNotFoundException if there is a ClassNotFoundException
   * @throws IOException if there is an IOException
   */
  @BeforeClass
  public static void init() throws SQLException, ClassNotFoundException, IOException {
    JdbcConnection.testMode = true;
    Class.forName("org.hsqldb.jdbc.JDBCDriver");
    initDatabase();
  }

  /**
   * Reset the connection to default mode.
   */
  @AfterClass
  public static void end() {
    JdbcConnection.testMode = false;
  }

  /**
   * Database initialization for testing.
   * @throws SQLException if there is an SQLException
   */
  public static void initDatabase() throws SQLException {
    Statement statement = JdbcConnection.getConnection().createStatement();
    statement.execute("create table company ("
        + "id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,"
        + "name VARCHAR(255),"
        + "constraint pk_company primary key (id));"
        );

    statement.execute("create table computer ("
        + "id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,"
        + "name VARCHAR(255),"
        + "introduced DATE NULL,"
        + "discontinued DATE NULL,"
        + "company_id INT default NULL,"
        + "constraint pk_computer primary key (id));"
        );
    statement.executeUpdate("INSERT INTO company (name) values ('Apple Inc.');");
    statement.executeUpdate("INSERT INTO company (name) values ('HP');");
    statement.executeUpdate("INSERT INTO computer (name,introduced,discontinued,company_id) values ('Computer 1','1983-12-01','1984-04-01',1);");
    statement.executeUpdate("INSERT INTO computer (name,introduced,discontinued,company_id) values ('Computer 2',null,'1984-04-01',1);");
    statement.executeUpdate("INSERT INTO computer (name,introduced,discontinued,company_id) values ('Computer 3','1983-12-01',null,1);");
    statement.executeUpdate("INSERT INTO computer (name,introduced,discontinued,company_id) values ('Computer 4',null,null,1);");
    statement.executeUpdate("INSERT INTO computer (name,introduced,discontinued,company_id) values ('Computer 5',null,null,null);");

    JdbcConnection.getConnection().commit();
  }

  /**
   * Get total records in computer table.
   * @return total number of records. In case of exception 0 is returned
   */
  private int getNumberOfComputers() {
    return ComputerService.getInstance().countComputers();
  }

  /**
   * Get total records in company table.
   * @return total number of records. In case of exception 0 is returned
   */
  private int getNumberOfCompanies() {
    return CompanyService.getInstance().countCompanies();
  }

  /**
   * Get total records in company table.
   * @return total number of records. In case of exception 0 is returned
   * @param id id of the computer you want details of.
   */
  private Computer getComputerDetails(int id) {
    Computer computer = ComputerService.getInstance().getComputerDetails(id);
    return computer;
  }

  /**
   * Get all computers and checks there is the right number.
   */
  @Test
  public void testListOfComputers() {
    assertEquals(5, getNumberOfComputers());
  }

  /**
   * Get all companies and checks there is the right number.
   */
  @Test
  public void testListOfCompanies() {
    assertEquals(2, getNumberOfCompanies());
  }

  /**
   * Get all companies and checks there is the right number.
   */
  @Test
  public void testGetDetailedComputerWithValidId() {
    int goodId = 1;
    assertEquals(goodId, getComputerDetails(goodId).getId());
  }

  /**
   * Get all companies and checks there is the right number.
   */
  @Test
  public void testGetDetailedComputerWithInvalidId() {
    int wrongId = -1;
    assertEquals(null, getComputerDetails(wrongId));
  }

  /**
   * Check computer creation with valid.
   * @throws CDBObjectException Thrown if there is an error with the validation
   */
  @Test
  public void testCreateComputerWithValidData() throws CDBObjectException {
    Computer goodComputer = new Computer(-1, "New good computer", Date.valueOf("1999-10-10"), Date.valueOf("2000-10-10"), 1, "Apple Inc.");
    ComputerService.getInstance().createComputer(goodComputer);
  }

  /**
   * Check computer creation with invalid parameters.
   * @throws CDBObjectException Thrown if there is an error with the validation
   */
  @Test(expected = CDBObjectCompanyIdException.class)
  public void testCreateComputerWithInvalidCompanyId() throws CDBObjectException {
    Computer wrongCompanyIdComputer = new Computer(-1, "New wrong company id computer", Date.valueOf("1999-10-10"), Date.valueOf("2000-10-10"), 3, "Apple Inc.");
    ComputerService.getInstance().createComputer(wrongCompanyIdComputer);
  }

  /**
   * Check computer creation with invalid parameters.
   * @throws CDBObjectException Thrown if there is an error with the validation
   */
  @Test(expected = CDBObjectException.class)
  public void testCreateComputerWithInvalidDate() throws CDBObjectException {
    Computer wrongDateComputer = new Computer(-1, "New wrong date computer", Date.valueOf("1998-10-10"), Date.valueOf("1997-10-10"), 1, "Apple Inc.");
    ComputerService.getInstance().createComputer(wrongDateComputer);
  }

  /**
   * Check computer update with valid parameters.
   * @throws CDBObjectException Thrown if there is an error with the validation
   */
  @Test
  public void testUpdateComputerWithValidData() throws CDBObjectException {
    Computer goodComputer = new Computer(1, "Updated good computer", Date.valueOf("1999-10-10"), Date.valueOf("2000-10-10"), 1, "Apple Inc.");
    ComputerService.getInstance().updateComputer(goodComputer);
  }

  /**
   * Check computer update with valid parameters.
   * @throws CDBObjectException Thrown if there is an error with the validation
   */
  @Test
  public void testUpdateComputerWithOnlyName() throws CDBObjectException {
    Computer onlyNameComputer = new Computer(1, "Updated only name computer", null, null, -1, null);
    ComputerService.getInstance().updateComputer(onlyNameComputer);
  }

  /**
   * Check computer update with valid parameters.
   * @throws CDBObjectException Thrown if there is an error with the validation
   */
  @Test
  public void testUpdateComputerWithOnlyNameAndDate() throws CDBObjectException {
    Computer onlyNameAndDateComputer = new Computer(1, "Updated only name and date computer", Date.valueOf("1999-10-10"), Date.valueOf("2000-10-10"), -1, null);
    ComputerService.getInstance().updateComputer(onlyNameAndDateComputer);
  }

  /**
   * Check computer update with valid parameters.
   * @throws CDBObjectException Thrown if there is an error with the validation
   */
  @Test
  public void testUpdateComputerWithOnlyNameAndCompanyId() throws CDBObjectException {
    Computer onlyNameCompanyIdComputer = new Computer(1, "Updated only name and company idcomputer", null, null, 1, null);
    ComputerService.getInstance().updateComputer(onlyNameCompanyIdComputer);
  }

  /**
   * Check computer update with invalid parameters.
   * @throws CDBObjectException Thrown if there is an error with the validation
   */
  @Test(expected = CDBObjectCompanyIdException.class)
  public void testUpdateComputerWithWrongCompanyid() throws CDBObjectException {
    Computer wrongCompanyIdComputer = new Computer(1, "Updated wrong company id computer", Date.valueOf("1999-10-10"), Date.valueOf("2000-10-10"), 3, "Apple Inc.");
    ComputerService.getInstance().updateComputer(wrongCompanyIdComputer);
  }

  /**
   * Check computer update with invalid parameters.
   * @throws CDBObjectException Thrown if there is an error with the validation
   */
  @Test(expected = CDBObjectException.class)
  public void testUpdateComputerWithWrongDate() throws CDBObjectException {
    Computer wrongDateComputer = new Computer(1, "Updated wrong date computer", Date.valueOf("1998-10-10"), Date.valueOf("1998-10-10"), 1, "Apple Inc.");
    ComputerService.getInstance().updateComputer(wrongDateComputer);
  }

}
